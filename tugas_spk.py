# -*- coding: utf-8 -*-
"""Tugas SPK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rGx7qNhw8iXkJW_iI9Yjy6s__rEMDNsy
"""

import random
import pandas as pd
from IPython.display import display

data = [
    {"Jam": "7.30-08.05", "Kd_Jam": "W1", "Kd_Guru": "T01", "Kd_Mata_Pelajaran": "M01", "Mata_Pelajaran": "PAI", "Guru": "May"},
    {"Jam": "08.05-08.40", "Kd_Jam": "W2", "Kd_Guru": "T02", "Kd_Mata_Pelajaran": "M02", "Mata_Pelajaran": "PPKN", "Guru": "Ninik"},
    {"Jam": "08.40-0915", "Kd_Jam": "W3", "Kd_Guru": "T03", "Kd_Mata_Pelajaran": "M03", "Mata_Pelajaran": "Matematika", "Guru": "Alifandi"},
    {"Jam": "09.15-09.50", "Kd_Jam": "W4", "Kd_Guru": "T04", "Kd_Mata_Pelajaran": "M04", "Mata_Pelajaran": "Bahasa Inggris", "Guru": "Setyo"},
    {"Jam": "09.50-10.25", "Kd_Jam": "W5", "Kd_Guru": "T05", "Kd_Mata_Pelajaran": "M05", "Mata_Pelajaran": "IPS", "Guru": "Sutarno"}
]

print("# Data Awal")
df_data = pd.DataFrame(data)
display(df_data)

def generate_population(data, population_size=5):
    """
    Membuat populasi awal dengan representasi jadwal yang valid.
    Setiap kromosom merepresentasikan jadwal lengkap.
    Setiap gen merepresentasikan satu slot waktu dengan guru dan mata pelajaran terkait.
    """
    population = []
    
    # Ekstrak daftar slot waktu yang tersedia
    available_time_slots = [item["Kd_Jam"] for item in data]
    
    for _ in range(population_size):
        # Setiap kromosom akan memiliki gen sebanyak slot waktu yang tersedia
        chromosome = []
        
        # Daftar guru yang sudah digunakan dalam kromosom ini
        used_teachers = set()
        # Daftar mata pelajaran yang sudah digunakan dalam kromosom ini
        used_subjects = set()
        
        # Shuffle daftar waktu untuk randomisasi jadwal
        time_slots = available_time_slots.copy()
        random.shuffle(time_slots)
        
        for time_slot in time_slots:
            # Filter data yang belum digunakan
            available_data = []
            for item in data:
                if (item["Kd_Guru"] not in used_teachers and 
                    item["Kd_Mata_Pelajaran"] not in used_subjects):
                    available_data.append(item)
            
            # Jika tidak ada data yang tersedia, mulai ulang dengan semua guru dan mata pelajaran
            if not available_data and len(chromosome) < len(available_time_slots):
                available_data = data
            
            # Pilih satu entri data secara acak
            selected_item = random.choice(available_data)
            
            # Buat gen dengan format yang konsisten
            gene = f"{selected_item['Kd_Guru']}{selected_item['Kd_Mata_Pelajaran']}{time_slot}"
            chromosome.append(gene)
            
            # Tandai guru dan mata pelajaran sudah digunakan
            used_teachers.add(selected_item["Kd_Guru"])
            used_subjects.add(selected_item["Kd_Mata_Pelajaran"])
        
        population.append(chromosome)
    
    return population

"""# Visualisasi Populasi Hasil Generate Acak"""

population = generate_population(data, population_size=5)
print("\nPopulasi yang dihasilkan:")
pop_data = []
for i, chromosome in enumerate(population):
    row = {"Kromosom": f"Kromosom {i+1}"}
    for j, gene in enumerate(chromosome):
        row[f"Gen {j+1}"] = gene
    pop_data.append(row)

display(pd.DataFrame(pop_data))

def calculate_fitness(chromosome):
    """
    Menghitung nilai fitness berdasarkan beberapa kriteria:
    1. Tidak ada guru yang mengajar di waktu yang sama (batasan utama)
    2. Prioritaskan guru tidak mengajar berturut-turut
    3. Proporsional distribusi mata pelajaran
    4. Mata pelajaran berat tidak di jam akhir
    """
    # Batasan utama: guru tidak boleh mengajar di waktu yang sama
    conflicts = 0
    teacher_times = {}
    
    # Untuk batasan tambahan
    consecutive_teachings = 0
    heavy_subjects_at_end = 0
    subject_count = {}
    
    # Daftar mata pelajaran berat
    heavy_subjects = ["M03"]  # Matematika
    late_hours = ["W4", "W5"]  # Jam-jam akhir
    
    # Untuk keperluan display, kita akan melacak konflik
    conflict_details = []
    
    # Urutkan gen berdasarkan kode jam untuk analisis pola berurutan
    sorted_genes = sorted(chromosome, key=lambda x: x[6:])
    
    # Analisis konflik dan batasan
    for i, gene in enumerate(sorted_genes):
        teacher = gene[:3]
        subject = gene[3:6]
        time = gene[6:]
        
        # Batasan 1: Konflik waktu
        if teacher in teacher_times and time in teacher_times[teacher]:
            conflicts += 1
            conflict_details.append({
                "Gene": gene,
                "Teacher": teacher,
                "Subject": subject,
                "Time": time,
                "Conflict": "Yes"
            })
        else:
            if teacher not in teacher_times:
                teacher_times[teacher] = []
            teacher_times[teacher].append(time)
            conflict_details.append({
                "Gene": gene,
                "Teacher": teacher,
                "Subject": subject,
                "Time": time,
                "Conflict": "No"
            })
        
        # Batasan 2: Guru mengajar berturut-turut
        if i > 0 and sorted_genes[i-1][:3] == teacher:
            consecutive_teachings += 1
        
        # Batasan 3: Proporsi mata pelajaran
        if subject in subject_count:
            subject_count[subject] += 1
        else:
            subject_count[subject] = 1
        
        # Batasan 4: Mata pelajaran berat di jam akhir
        if subject in heavy_subjects and time in late_hours:
            heavy_subjects_at_end += 1
    
    # Hitung ketidakseimbangan proporsi mata pelajaran
    subject_imbalance = sum(abs(count - (len(chromosome) / len(subject_count))) 
                           for count in subject_count.values())
    
    # Hitung nilai fitness final
    # Faktor pembobotan untuk setiap kriteria
    w1, w2, w3, w4 = 0.5, 0.2, 0.2, 0.1  # total = 1.0
    
    # Normalisasi nilainya ke range [0-1] dengan membalik (semakin kecil semakin baik)
    conflicts_norm = 1 / (1 + conflicts)
    consecutive_norm = 1 / (1 + consecutive_teachings)
    imbalance_norm = 1 / (1 + subject_imbalance)
    heavy_end_norm = 1 / (1 + heavy_subjects_at_end)
    
    # Fitness akhir
    fitness_value = (
        w1 * conflicts_norm +
        w2 * consecutive_norm +
        w3 * imbalance_norm +
        w4 * heavy_end_norm
    )
    
    return fitness_value, conflict_details, {
        "Konflik Jadwal": conflicts,
        "Jadwal Berturutan": consecutive_teachings,
        "Ketidakseimbangan Mapel": subject_imbalance,
        "Mapel Berat di Jam Akhir": heavy_subjects_at_end,
        "Fitness Parsial": {
            "Konflik": conflicts_norm,
            "Berturutan": consecutive_norm,
            "Ketidakseimbangan": imbalance_norm,
            "Mapel Berat di Akhir": heavy_end_norm
        }
    }

# fungsi fitness
print("\n# Fungsi Fitness")
for i, chromosome in enumerate(population):
    fitness, conflict_details, fitness_components = calculate_fitness(chromosome)
    print(f"\nKromosom {i+1}: {chromosome}")
    print(f"Nilai Fitness: {fitness:.4f}")
    
    print("\nKomponen Fitness:")
    print(f"- Konflik Jadwal: {fitness_components['Konflik Jadwal']}")
    print(f"- Jadwal Berturutan: {fitness_components['Jadwal Berturutan']}")
    print(f"- Ketidakseimbangan Mapel: {fitness_components['Ketidakseimbangan Mapel']:.2f}")
    print(f"- Mapel Berat di Jam Akhir: {fitness_components['Mapel Berat di Jam Akhir']}")
    
    print("\nDetail Analisis Konflik:")
    display(pd.DataFrame(conflict_details))

def selection(population, display_details=False):
    """Melakukan seleksi menggunakan metode roulette wheel."""

    fitness_values = [calculate_fitness(chromosome)[0] for chromosome in population]
    total_fitness = sum(fitness_values)
    probabilities = [f / total_fitness for f in fitness_values]

    # Untuk keperluan display
    selection_details = []
    for i, (chromosome, fitness, prob) in enumerate(zip(population, fitness_values, probabilities)):
        selection_details.append({
            "Kromosom": f"Kromosom {i+1}",
            "Kromosom Value": str(chromosome),
            "Fitness": f"{fitness:.4f}",
            "Probabilitas": f"{prob:.4f}"
        })

    if display_details:
        print("\nDetail Seleksi:")
        display(pd.DataFrame(selection_details))

    new_population = []
    selection_results = []

    for j in range(len(population)):
        # Roulette wheel selection
        r = random.random()
        cumulative_probability = 0
        selected_index = -1

        for i, p in enumerate(probabilities):
            cumulative_probability += p
            if r <= cumulative_probability:
                new_population.append(population[i])
                selected_index = i
                break

        if display_details:
            selection_results.append({
                "Seleksi ke": j+1,
                "Nilai Random": f"{r:.4f}",
                "Kromosom Terpilih": f"Kromosom {selected_index+1}"
            })

    if display_details:
        print("\nHasil Seleksi:")
        display(pd.DataFrame(selection_results))

    return new_population

# fungsi seleksi
print("\n# 3. Fungsi Seleksi")
selected_population = selection(population, display_details=True)

print("\nPopulasi Setelah Seleksi:")
selected_pop_data = []
for i, chromosome in enumerate(selected_population):
    row = {"Kromosom": f"Kromosom {i+1}"}
    for j, gene in enumerate(chromosome):
        row[f"Gen {j+1}"] = gene
    selected_pop_data.append(row)

display(pd.DataFrame(selected_pop_data))

# 4. Crossover
def crossover(parent1, parent2, crossover_rate=0.6, display_details=False):
    """Melakukan crossover (pindah silang) dengan probabilitas tertentu."""

    crossover_happened = False
    point = -1

    if random.random() < crossover_rate:
        # Single-point crossover
        point = random.randint(1, len(parent1) - 1)
        child1 = parent1[:point] + parent2[point:]
        child2 = parent2[:point] + parent1[point:]
        crossover_happened = True
    else:
        child1 = parent1.copy()
        child2 = parent2.copy()

    if display_details:
        crossover_info = {
            "Terjadi Crossover": "Ya" if crossover_happened else "Tidak",
            "Titik Potong": point if crossover_happened else "N/A",
            "Parent 1": str(parent1),
            "Parent 2": str(parent2),
            "Child 1": str(child1),
            "Child 2": str(child2)
        }
        print("\nDetail Crossover:")
        for key, value in crossover_info.items():
            print(f"{key}: {value}")

    return child1, child2

# Demo fungsi crossover
print("\n# 4. Demo Crossover")
if len(selected_population) >= 2:
    parent1 = selected_population[0]
    parent2 = selected_population[1]

    print(f"Parent 1: {parent1}")
    print(f"Parent 2: {parent2}")

    child1, child2 = crossover(parent1, parent2, crossover_rate=0.6, display_details=True)

    print(f"\nChild 1: {child1}")
    print(f"Child 2: {child2}")
else:
    print("Tidak cukup kromosom untuk demonstrasi crossover")

# 5. Mutasi
def mutate(chromosome, mutation_rate=0.1, display_details=False):
    """
    Melakukan mutasi dengan pertukaran slot waktu antar gen.
    Ini mempertahankan validitas jadwal dengan hanya menukar jam.
    """
    original_chromosome = chromosome.copy()
    mutation_details = []

    for i in range(len(chromosome)):
        if random.random() < mutation_rate:
            # Pilih gen kedua secara acak untuk menukar jam
            j = random.randint(0, len(chromosome) - 1)
            while j == i:  # Pastikan berbeda dengan gen pertama
                j = random.randint(0, len(chromosome) - 1)
            
            # Pecah gen menjadi komponen-komponennya
            gene1 = chromosome[i]
            gene2 = chromosome[j]
            
            teacher1 = gene1[:3]
            subject1 = gene1[3:6]
            time1 = gene1[6:]
            
            teacher2 = gene2[:3]
            subject2 = gene2[3:6] 
            time2 = gene2[6:]
            
            # Tukar kode jam
            new_gene1 = teacher1 + subject1 + time2
            new_gene2 = teacher2 + subject2 + time1
            
            # Update kromosom
            chromosome[i] = new_gene1
            chromosome[j] = new_gene2
            
            mutation_details.append({
                "Posisi Gen 1": i+1,
                "Posisi Gen 2": j+1,
                "Gen 1 Asli": gene1,
                "Gen 2 Asli": gene2,
                "Gen 1 Hasil Mutasi": new_gene1,
                "Gen 2 Hasil Mutasi": new_gene2
            })

    if display_details:
        print("\nDetail Mutasi:")
        print(f"Kromosom Asli: {original_chromosome}")
        print(f"Kromosom Setelah Mutasi: {chromosome}")

        if mutation_details:
            print("\nGen yang Dimutasi:")
            display(pd.DataFrame(mutation_details))
        else:
            print("Tidak ada gen yang mengalami mutasi.")

    return chromosome

# Demo fungsi mutasi
print("\n# 5. Demo Mutasi")
if len(selected_population) > 0:
    chromosome_to_mutate = selected_population[0].copy()
    print(f"Kromosom Sebelum Mutasi: {chromosome_to_mutate}")

    # Tingkatkan mutation_rate untuk demo agar mutasi lebih mungkin terjadi
    mutated_chromosome = mutate(chromosome_to_mutate, mutation_rate=0.3, display_details=True)

    print(f"\nKromosom Setelah Mutasi: {mutated_chromosome}")
else:
    print("Tidak ada kromosom untuk demonstrasi mutasi")

# 6. Algoritma Genetika Utama
def genetic_algorithm(data, population_size=5, generations=10, crossover_rate=0.6, mutation_rate=0.1):
    """Implementasi algoritma genetika untuk penjadwalan."""

    print("Menjalankan Algoritma Genetika dengan parameter:")
    print(f"Population Size: {population_size}")
    print(f"Generations: {generations}")
    print(f"Crossover Rate: {crossover_rate}")
    print(f"Mutation Rate: {mutation_rate}")

    # Inisialisasi populasi
    population = generate_population(data, population_size)
    best_fitness = 0
    best_schedule = []

    # Tracking perkembangan fitness terbaik
    fitness_history = []

    for generation in range(generations):
        # Evaluasi Fitness
        fitness_values = [calculate_fitness(chromosome)[0] for chromosome in population]
        avg_fitness = sum(fitness_values) / len(fitness_values)

        # Cari individu terbaik
        max_fitness = max(fitness_values)
        if max_fitness > best_fitness:
            best_fitness = max_fitness
            best_schedule = population[fitness_values.index(max_fitness)]

        fitness_history.append({
            "Generation": generation + 1,
            "Best Fitness": max_fitness,
            "Average Fitness": avg_fitness
        })

        # Report progress setiap beberapa generasi
        if (generation + 1) % 5 == 0 or generation == 0 or generation == generations - 1:
            print(f"\nGenerasi {generation + 1}:")
            print(f"Fitness Terbaik: {max_fitness:.4f}")
            print(f"Fitness Rata-rata: {avg_fitness:.4f}")

        # Seleksi
        population = selection(population)

        # Crossover
        new_population = []
        for i in range(0, len(population), 2):
            parent1 = population[i]
            parent2 = population[i + 1] if i + 1 < len(population) else population[i] # Jika ganjil, kawinkan dengan diri sendiri
            child1, child2 = crossover(parent1, parent2, crossover_rate)
            new_population.append(child1)
            new_population.append(child2)
        population = new_population

        # Mutasi
        population = [mutate(chromosome, mutation_rate) for chromosome in population]

    print("\nProses Selesai!")
    print(f"Fitness Terbaik yang Ditemukan: {best_fitness:.4f}")

    # Tampilkan grafik perkembangan fitness
    fitness_df = pd.DataFrame(fitness_history)
    print("\nPerkembangan Fitness per Generasi:")
    display(fitness_df)

    return best_schedule, best_fitness

# Demo Algoritma Genetika
print("\n# 6. Demo Algoritma Genetika")
# Kita gunakan jumlah generasi yang lebih kecil untuk demo
best_schedule, best_fitness = genetic_algorithm(data, population_size=5, generations=10)

# 7. Tampilkan Hasil Akhir
print("\n# 7. Hasil Akhir Algoritma Genetika")
print("Jadwal Terbaik:", best_schedule)
print("Nilai Fitness Terbaik:", best_fitness)

# Decode jadwal terbaik
print("\nDecoding Jadwal Terbaik:")
decoded_schedule = []

for i, gene in enumerate(best_schedule):
    teacher_code = gene[:3]
    subject_code = gene[3:6]
    time_code = gene[6:]

    # Cari data lengkap
    teacher_name = next((item["Guru"] for item in data if item["Kd_Guru"] == teacher_code), "Unknown")
    subject_name = next((item["Mata_Pelajaran"] for item in data if item["Kd_Mata_Pelajaran"] == subject_code), "Unknown")
    time_slot = next((item["Jam"] for item in data if item["Kd_Jam"] == time_code), "Unknown")

    decoded_schedule.append({
        "Slot": i+1,
        "Gene": gene,
        "Guru": teacher_name,
        "Mata Pelajaran": subject_name,
        "Jam": time_slot,
        "Kode Guru": teacher_code,
        "Kode Mata Pelajaran": subject_code,
        "Kode Jam": time_code
    })

# Tampilkan jadwal terbaik dalam bentuk tabel
display(pd.DataFrame(decoded_schedule))

print("\nAnalisis Konflik pada Jadwal Terbaik:")
best_fitness, conflict_details, fitness_components = calculate_fitness(best_schedule)
display(pd.DataFrame(conflict_details))

print("\nKomponen Fitness dari Jadwal Terbaik:")
for key, value in fitness_components.items():
    if key != "Fitness Parsial":
        print(f"- {key}: {value}")

print("\nKontribusi Fitness Parsial:")
for key, value in fitness_components["Fitness Parsial"].items():
    print(f"- {key}: {value:.4f}")